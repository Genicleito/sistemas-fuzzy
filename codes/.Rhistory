installed.packages("frbs")
library('frbs')
# load('./GitHub/sistemasFuzzy/C?digos/bancoufba.rData')
dt <- read.csv('./GitHub/sistemasFuzzy/C?digos/jogarTenis.csv', sep = ',')
for(i in c(1: ncol(dt))){
dt[i] = as.numeric( unlist(dt[i]) )
}
# Mistura os dados (menos a coluna 1 que ? um identificador do dia)
dt <- dt[ sample( nrow(dt), nrow(dt)), -1]
# Coleta dados de forma aleat?ria para ser o conjunto de treinamento
dt.train <- dt[ (1 : ( nrow(dt) * 1 / 3 )), ]
# Coleta dados de forma aleat?ria para ser o conjunto de teste
dt.test <- dt[ (nrow(dt) * 1 / 3) : ( nrow(dt) ), ]
wm <- function() {
range.data <- apply(dt.train, 2, range)
method.type <- "WM"
control <- list(num.labels = 5, type.mf = "TRIANGLE", type.defuz = "WAM",
type.tnorm = "MIN", type.snorm = "MAX", type.implication.func = "ZADEH",
name = "sim-jogarTenis")
a <- frbs.learn(dt.train, range.data, method.type, control)
return (a)
}
install.packages("frbs")
install.packages("frbs")
data(iris)
iris
set.seed(e)
set.seed(2)
?set.seed
irisShuffled <- iris[sample(nrow(iris)), ]
iris
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
irisShuffled
tra.iris <- irisShuffled[1 : 105, ]
tra.iris
tst.iris <- irisShuffled[106 : nrow(irisShuffled), 1 : 4]
real.iris <- matrix(irisShuffled[106 : nrow(irisShuffled), 5], ncol = 1)
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
range.data.input
method.type <- "FRBCS.W"
control <- list(num.labels = 7, type.mf = "GAUSSIAN", type.tnorm = "MIN",
type.snorm = "MAX", type.implication.func = "ZADEH")
object.cls <- frbs.learn(tra.iris, range.data.input, method.type, control)
library('frbs')
object.cls <- frbs.learn(tra.iris, range.data.input, method.type, control)
res.test <- predict(object.cls, tst.iris)
summary(object.cls)
plotMF(object.cls)
data(frbsData)
data.train <- frbsData$GasFurnance.dt[1 : 204, ]
data.tst <- frbsData$GasFurnance.dt[205 : 292, 1 : 2]
real.val <- matrix(frbsData$GasFurnance.dt[205 : 292, 3], ncol = 1)
range.data <-apply(data.train, 2, range)
method.type <- "WM"
control <- list(num.labels = 15, type.mf = "GAUSSIAN", type.defuz = "WAM",
type.tnorm = "MIN", type.snorm = "MAX", type.implication.func = "ZADEH",
name = "sim-0"
)
object.reg <- frbs.learn(data.train, range.data, method.type, control)
res.test <- predict(object.reg, data.tst)
summary(object.reg)
frbsData
data.train
data.tst
data.train
summary(object.reg)
plotMF(object.reg)
setwd("~/Documents/GitHub/sistemas-fuzzy/Trabalho/Codigos/")
library("frbs")
## Le o dataset
dataset <- read.csv("dados-sem-nominais.csv", header = TRUE, sep = ",")
## Le o dataset
dataset <- read.csv("../../Datasets/base-enemBA-pre-processada.csv", header = TRUE, sep = ",")
# Remove os inscritos que nao informaram o tipo da escola que estudaram
dataset <- dataset[ dataset$TP_ESCOLA != 1,  ]
dataset <- transformarNominalNumerico(dataset)
source("pre-processamento.r")
dataset <- transformarNominalNumerico(dataset)
dataset
dataset <- dataset[ dataset$NU_NOTA_REDACAO != 0, ]
dataset <- dataset[ , -c(4)]
dataset
## Divide o dataset
data.train <- dataset[1 : ( nrow(dataset) * 2 / 3 ), ]
data.tst <- dataset[ ( (nrow(dataset) * 2 / 3) + 1 ) :  nrow(dataset), -ncol(dataset) ]
real.val <- dataset[ ( (nrow(dataset) * 2 / 3) + 1 ) :  nrow(dataset), ncol(dataset) ]
## Define o intervalo dos dados
range.data <- apply(data.train, 2, range)
##
method.type <- "WM"
control <- list(num.labels = 5,
type.tnorm = "MIN",
type.snorm = "MAX",
type.defuz = "WAM",
type.implication.func = "LUKASIEWICZ",
name = "Rule-Generation-5_-_regions-semRedacaoCom0",
type.mf = "TRIANGLE"
)
# Nome das variaveis
colnames.var <- colnames(dataset)
## Inicia o aprendizado
object.reg <- frbs.learn(data.train, range.data, method.type, control)
res.test <- c()
for(i in 1:nrow(data.tst)) {
cat("Testando... ", i, "\n")
res.test <- c(res.test, predict(object.reg, data.tst[i, ]))
}
# res.test <- predict(object.reg, data.tst)
write.csv(res.test, file = "predicao-obtida-5regioes-semNota0redacao.txt", row.names = FALSE, col.names = FALSE)
for(i in 1:length(object.reg)) { write.csv(object.reg[i], paste(i, ".csv"), sep = ",") }
write.csv(real.val, "real.val.semNotaZero.csv", sep = ",")
real.val
write.csv(real.val, "real.val.semNotaZero.csv", sep = ",")
dataset <- dataset[ dataset$NU_NOTA_REDACAO != 0, ]
dataset[ , 10]
dataset[ , 10] == 0
real.val <- dataset[ ( (nrow(dataset) * 2 / 3) + 1 ) :  nrow(dataset), ncol(dataset) ]
real.val
real.val(1:10)
real.val[1:10]
real.val <- dataset[ ( (nrow(dataset) * 2 / 3) + 1 ) :  nrow(dataset), ncol(dataset) ]
write.csv(real.val, "real.val.semNotaZero.csv", sep = ",")
real.val[1:10]
write.csv(real.val, "real.val.semNotaZero.csv", sep = ",")
a_r_leve <- 0
m_r_leve <- 0
b_r_leve <- 0.5
a_r_media <- 0
m_r_media <- 0.5
b_r_media <- 1
a_r_forte <- 0.5
m_r_forte <- 1
b_r_forte <- 1
triangular <- function(x, a, m, b) {
if (x >= a && x < m) {
return ((x - a) / (m - a))
} else if (x >= m && x < b) {
return ((b - x) / (b - m))
} else {
return (0)
}
}
trapezoidal <- function(x, a, m, n, b) {
if (x < a || x > b) {
return(0)
} else if (x >= a & x < m) {
return((x - a) / (m - a))
} else if (x >= m & x < n) {
return(1)
} else if (x >= n & x < b) {
return((b - x) / (b - n))
}
}
resultado_conjunto_fuzzy <- c()
conjunto_fuzzy <- seq(0, 1, 0.01)
for (i in seq(0, 0.5, 0.01)) {
resultado_conjunto_fuzzy <- c(resultado_conjunto_fuzzy,
triangular(i, 0, 0, 0.5))
}
plot(conjunto_fuzzy, resultado_conjunto_fuzzy, type = "l")
resultado_conjunto_fuzzy <- c()
conjunto_fuzzy <- seq(0, 1, 0.01)
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, fuzzy_triangular, 0, 0, 0.5))
for (i in seq(0, 0.5, 0.01)) {
resultado_conjunto_fuzzy <- c(resultado_conjunto_fuzzy,
triangular(i, 0, 0, 0.5))
}
plot(conjunto_fuzzy, resultado_conjunto_fuzzy, type = "l")
# Varia??o de vendas
# Diminuindo
resultado_conjunto_fuzzy <- c()
conjunto_fuzzy <- seq(0, 1, 0.01)
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, fuzzy_triangular, 0, 0, 0.5))
for (i in x) {
resultado_conjunto_fuzzy <- c(resultado_conjunto_fuzzy,
triangular(x, 0, 0, 0.5))
# Varia??o de vendas
# Diminuindo
resultado_conjunto_fuzzy <- c()
conjunto_fuzzy <- seq(0, 1, 0.01)
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, fuzzy_triangular, 0, 0, 0.5))
for (i in x) {
resultado_conjunto_fuzzy <- c(resultado_conjunto_fuzzy,
triangular(x, 0, 0, 0.5))
plot(conjunto_fuzzy, resultado_conjunto_fuzzy, type = "l")
dsds
s
s
s
s
}
}}}}
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, fuzzy_triangular, 0, 0, 0.5))
y <- unlist(lapply(x, triangular, 0, 0, 0.5))
for (i in x) {
resultado_conjunto_fuzzy <- c(resultado_conjunto_fuzzy,
triangular(x, 0, 0, 0.5))
}
plot(conjunto_fuzzy, resultado_conjunto_fuzzy, type = "l")
x
y
length(x)
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, triangular, 0, 0, 0.5))
plot(x, y, type = "l")
plot(x, y, type = "l", xlim = 1)
plot(x, y, type = "l", xlim = c(0:1)
)
resultado_conjunto_fuzzy <- c()
conjunto_fuzzy <- seq(0, 1, 0.01)
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, triangular, 0, 0, 0.5))
plot(x, y, type = "l", xlim = c(0:1))
y <- unlist(lapply(x, triangular, 0, 0.5, 1))
x <- seq(0, 1, 0.01)
y <- unlist(lapply(x, triangular, 0, 0.5, 1))
plot(x, y, type = "l", xlim = c(0:1))
resultado_conjunto_fuzzy <- c()
conjunto_fuzzy <- seq(0, 1, 0.01)
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, triangular, 0, 0, 0.5))
plot(x, y, type = "l", xlim = c(0:1))
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, triangular, 0, 0, 0.5))
plot(x, y, type = "l", xlim = c(0:1))
x <- seq(0, 1, 0.01)
y <- unlist(lapply(x, triangular, 0, 0.5, 1))
line(x, y, type = "l", xlim = c(0:1))
line(x, y, xlim = c(0:1))
line(x, y)
lines(x, y)
x <- seq(0.5, 1, 0.01)
y <- unlist(lapply(x, triangular, 0.5, 1, 1))
lines(x, y)
plot(x, y, type = "l", xlim = c(0:1), main = "Nota da Redação")
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, triangular, 0, 0, 0.5))
plot(x, y, type = "l", xlim = c(0:1), main = "Nota da Redação")
plot(x, y, type = "l", xlim = c(0:1), main = "Nota da Redação", xlab = "Intervalo Normalizado", ylab = "Grau de Pertinência")
# Est?vel
resultado_conjunto_estavel <- c()
conjunto_estavel <- seq(0, 1, 0.01)
x <- seq(0, 1, 0.01)
y <- unlist(lapply(x, triangular, 0, 0.5, 1))
lines(x, y)
x <- seq(0.5, 1, 0.01)
y <- unlist(lapply(x, triangular, 0.5, 1, 1))
lines(x, y)
x
y
x <- seq(0, 0.5, 0.01)
y <- unlist(lapply(x, triangular, 0, 0, 0.5))
x
y
